// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: HXT.proto

#include "HXT.pb.h"
#include "HXT.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace HXT {

static const char* RPC_method_names[] = {
  "/HXT.RPC/setup",
  "/HXT.RPC/consearch",
};

std::unique_ptr< RPC::Stub> RPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPC::Stub> stub(new RPC::Stub(channel));
  return stub;
}

RPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setup_(RPC_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_consearch_(RPC_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientWriter< ::HXT::SetupRequestMessage>* RPC::Stub::setupRaw(::grpc::ClientContext* context, ::HXT::ExecuteStatus* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::HXT::SetupRequestMessage>::Create(channel_.get(), rpcmethod_setup_, context, response);
}

void RPC::Stub::experimental_async::setup(::grpc::ClientContext* context, ::HXT::ExecuteStatus* response, ::grpc::experimental::ClientWriteReactor< ::HXT::SetupRequestMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::HXT::SetupRequestMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_setup_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::HXT::SetupRequestMessage>* RPC::Stub::AsyncsetupRaw(::grpc::ClientContext* context, ::HXT::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::HXT::SetupRequestMessage>::Create(channel_.get(), cq, rpcmethod_setup_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::HXT::SetupRequestMessage>* RPC::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, ::HXT::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::HXT::SetupRequestMessage>::Create(channel_.get(), cq, rpcmethod_setup_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::HXT::SearchRequestMessage, ::HXT::SearchReply>* RPC::Stub::consearchRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::HXT::SearchRequestMessage, ::HXT::SearchReply>::Create(channel_.get(), rpcmethod_consearch_, context);
}

void RPC::Stub::experimental_async::consearch(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::HXT::SearchRequestMessage,::HXT::SearchReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::HXT::SearchRequestMessage,::HXT::SearchReply>::Create(stub_->channel_.get(), stub_->rpcmethod_consearch_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::HXT::SearchRequestMessage, ::HXT::SearchReply>* RPC::Stub::AsyncconsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::HXT::SearchRequestMessage, ::HXT::SearchReply>::Create(channel_.get(), cq, rpcmethod_consearch_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::HXT::SearchRequestMessage, ::HXT::SearchReply>* RPC::Stub::PrepareAsyncconsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::HXT::SearchRequestMessage, ::HXT::SearchReply>::Create(channel_.get(), cq, rpcmethod_consearch_, context, false, nullptr);
}

RPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::HXT::SetupRequestMessage, ::HXT::ExecuteStatus>(
          std::mem_fn(&RPC::Service::setup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RPC::Service, ::HXT::SearchRequestMessage, ::HXT::SearchReply>(
          std::mem_fn(&RPC::Service::consearch), this)));
}

RPC::Service::~Service() {
}

::grpc::Status RPC::Service::setup(::grpc::ServerContext* context, ::grpc::ServerReader< ::HXT::SetupRequestMessage>* reader, ::HXT::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::consearch(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::HXT::SearchReply, ::HXT::SearchRequestMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace HXT

