// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HXT.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HXT_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HXT_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HXT_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HXT_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HXT_2eproto;
namespace HXT {
class ExecuteStatus;
class ExecuteStatusDefaultTypeInternal;
extern ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequestMessage;
class SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class SetupRequestMessage;
class SetupRequestMessageDefaultTypeInternal;
extern SetupRequestMessageDefaultTypeInternal _SetupRequestMessage_default_instance_;
}  // namespace HXT
PROTOBUF_NAMESPACE_OPEN
template<> ::HXT::ExecuteStatus* Arena::CreateMaybeMessage<::HXT::ExecuteStatus>(Arena*);
template<> ::HXT::SearchReply* Arena::CreateMaybeMessage<::HXT::SearchReply>(Arena*);
template<> ::HXT::SearchRequestMessage* Arena::CreateMaybeMessage<::HXT::SearchRequestMessage>(Arena*);
template<> ::HXT::SetupRequestMessage* Arena::CreateMaybeMessage<::HXT::SetupRequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HXT {

// ===================================================================

class SetupRequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HXT.SetupRequestMessage) */ {
 public:
  SetupRequestMessage();
  virtual ~SetupRequestMessage();

  SetupRequestMessage(const SetupRequestMessage& from);
  SetupRequestMessage(SetupRequestMessage&& from) noexcept
    : SetupRequestMessage() {
    *this = ::std::move(from);
  }

  inline SetupRequestMessage& operator=(const SetupRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequestMessage& operator=(SetupRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SetupRequestMessage*>(
               &_SetupRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetupRequestMessage& a, SetupRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupRequestMessage* New() const final {
    return CreateMaybeMessage<SetupRequestMessage>(nullptr);
  }

  SetupRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupRequestMessage& from);
  void MergeFrom(const SetupRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HXT.SetupRequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HXT_2eproto);
    return ::descriptor_table_HXT_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kEncFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // bytes label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const void* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // bytes enc = 3;
  void clear_enc();
  const std::string& enc() const;
  void set_enc(const std::string& value);
  void set_enc(std::string&& value);
  void set_enc(const char* value);
  void set_enc(const void* value, size_t size);
  std::string* mutable_enc();
  std::string* release_enc();
  void set_allocated_enc(std::string* enc);
  private:
  const std::string& _internal_enc() const;
  void _internal_set_enc(const std::string& value);
  std::string* _internal_mutable_enc();
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:HXT.SetupRequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HXT_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HXT.SearchRequestMessage) */ {
 public:
  SearchRequestMessage();
  virtual ~SearchRequestMessage();

  SearchRequestMessage(const SearchRequestMessage& from);
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequestMessage* New() const final {
    return CreateMaybeMessage<SearchRequestMessage>(nullptr);
  }

  SearchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequestMessage& from);
  void MergeFrom(const SearchRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HXT.SearchRequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HXT_2eproto);
    return ::descriptor_table_HXT_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStagFieldNumber = 1,
    kXtokenxFieldNumber = 3,
    kXtokenyFieldNumber = 4,
    kD1FieldNumber = 5,
    kD2FieldNumber = 6,
    kIndexFieldNumber = 2,
  };
  // bytes stag = 1;
  void clear_stag();
  const std::string& stag() const;
  void set_stag(const std::string& value);
  void set_stag(std::string&& value);
  void set_stag(const char* value);
  void set_stag(const void* value, size_t size);
  std::string* mutable_stag();
  std::string* release_stag();
  void set_allocated_stag(std::string* stag);
  private:
  const std::string& _internal_stag() const;
  void _internal_set_stag(const std::string& value);
  std::string* _internal_mutable_stag();
  public:

  // bytes xtokenx = 3;
  void clear_xtokenx();
  const std::string& xtokenx() const;
  void set_xtokenx(const std::string& value);
  void set_xtokenx(std::string&& value);
  void set_xtokenx(const char* value);
  void set_xtokenx(const void* value, size_t size);
  std::string* mutable_xtokenx();
  std::string* release_xtokenx();
  void set_allocated_xtokenx(std::string* xtokenx);
  private:
  const std::string& _internal_xtokenx() const;
  void _internal_set_xtokenx(const std::string& value);
  std::string* _internal_mutable_xtokenx();
  public:

  // bytes xtokeny = 4;
  void clear_xtokeny();
  const std::string& xtokeny() const;
  void set_xtokeny(const std::string& value);
  void set_xtokeny(std::string&& value);
  void set_xtokeny(const char* value);
  void set_xtokeny(const void* value, size_t size);
  std::string* mutable_xtokeny();
  std::string* release_xtokeny();
  void set_allocated_xtokeny(std::string* xtokeny);
  private:
  const std::string& _internal_xtokeny() const;
  void _internal_set_xtokeny(const std::string& value);
  std::string* _internal_mutable_xtokeny();
  public:

  // bytes d1 = 5;
  void clear_d1();
  const std::string& d1() const;
  void set_d1(const std::string& value);
  void set_d1(std::string&& value);
  void set_d1(const char* value);
  void set_d1(const void* value, size_t size);
  std::string* mutable_d1();
  std::string* release_d1();
  void set_allocated_d1(std::string* d1);
  private:
  const std::string& _internal_d1() const;
  void _internal_set_d1(const std::string& value);
  std::string* _internal_mutable_d1();
  public:

  // bytes d2 = 6;
  void clear_d2();
  const std::string& d2() const;
  void set_d2(const std::string& value);
  void set_d2(std::string&& value);
  void set_d2(const char* value);
  void set_d2(const void* value, size_t size);
  std::string* mutable_d2();
  std::string* release_d2();
  void set_allocated_d2(std::string* d2);
  private:
  const std::string& _internal_d2() const;
  void _internal_set_d2(const std::string& value);
  std::string* _internal_mutable_d2();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:HXT.SearchRequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xtokenx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xtokeny_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HXT_2eproto;
};
// -------------------------------------------------------------------

class SearchReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HXT.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const final {
    return CreateMaybeMessage<SearchReply>(nullptr);
  }

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HXT.SearchReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HXT_2eproto);
    return ::descriptor_table_HXT_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHFieldNumber = 2,
    kEidFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // bytes h = 2;
  void clear_h();
  const std::string& h() const;
  void set_h(const std::string& value);
  void set_h(std::string&& value);
  void set_h(const char* value);
  void set_h(const void* value, size_t size);
  std::string* mutable_h();
  std::string* release_h();
  void set_allocated_h(std::string* h);
  private:
  const std::string& _internal_h() const;
  void _internal_set_h(const std::string& value);
  std::string* _internal_mutable_h();
  public:

  // bytes eid = 3;
  void clear_eid();
  const std::string& eid() const;
  void set_eid(const std::string& value);
  void set_eid(std::string&& value);
  void set_eid(const char* value);
  void set_eid(const void* value, size_t size);
  std::string* mutable_eid();
  std::string* release_eid();
  void set_allocated_eid(std::string* eid);
  private:
  const std::string& _internal_eid() const;
  void _internal_set_eid(const std::string& value);
  std::string* _internal_mutable_eid();
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:HXT.SearchReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HXT_2eproto;
};
// -------------------------------------------------------------------

class ExecuteStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HXT.ExecuteStatus) */ {
 public:
  ExecuteStatus();
  virtual ~ExecuteStatus();

  ExecuteStatus(const ExecuteStatus& from);
  ExecuteStatus(ExecuteStatus&& from) noexcept
    : ExecuteStatus() {
    *this = ::std::move(from);
  }

  inline ExecuteStatus& operator=(const ExecuteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteStatus& operator=(ExecuteStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteStatus* internal_default_instance() {
    return reinterpret_cast<const ExecuteStatus*>(
               &_ExecuteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecuteStatus& a, ExecuteStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteStatus* New() const final {
    return CreateMaybeMessage<ExecuteStatus>(nullptr);
  }

  ExecuteStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteStatus& from);
  void MergeFrom(const ExecuteStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HXT.ExecuteStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HXT_2eproto);
    return ::descriptor_table_HXT_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HXT.ExecuteStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HXT_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupRequestMessage

// uint32 index = 1;
inline void SetupRequestMessage::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetupRequestMessage::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetupRequestMessage::index() const {
  // @@protoc_insertion_point(field_get:HXT.SetupRequestMessage.index)
  return _internal_index();
}
inline void SetupRequestMessage::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void SetupRequestMessage::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:HXT.SetupRequestMessage.index)
}

// bytes label = 2;
inline void SetupRequestMessage::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetupRequestMessage::label() const {
  // @@protoc_insertion_point(field_get:HXT.SetupRequestMessage.label)
  return _internal_label();
}
inline void SetupRequestMessage::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:HXT.SetupRequestMessage.label)
}
inline std::string* SetupRequestMessage::mutable_label() {
  // @@protoc_insertion_point(field_mutable:HXT.SetupRequestMessage.label)
  return _internal_mutable_label();
}
inline const std::string& SetupRequestMessage::_internal_label() const {
  return label_.GetNoArena();
}
inline void SetupRequestMessage::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetupRequestMessage::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SetupRequestMessage.label)
}
inline void SetupRequestMessage::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SetupRequestMessage.label)
}
inline void SetupRequestMessage::set_label(const void* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SetupRequestMessage.label)
}
inline std::string* SetupRequestMessage::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetupRequestMessage::release_label() {
  // @@protoc_insertion_point(field_release:HXT.SetupRequestMessage.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetupRequestMessage::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:HXT.SetupRequestMessage.label)
}

// bytes enc = 3;
inline void SetupRequestMessage::clear_enc() {
  enc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetupRequestMessage::enc() const {
  // @@protoc_insertion_point(field_get:HXT.SetupRequestMessage.enc)
  return _internal_enc();
}
inline void SetupRequestMessage::set_enc(const std::string& value) {
  _internal_set_enc(value);
  // @@protoc_insertion_point(field_set:HXT.SetupRequestMessage.enc)
}
inline std::string* SetupRequestMessage::mutable_enc() {
  // @@protoc_insertion_point(field_mutable:HXT.SetupRequestMessage.enc)
  return _internal_mutable_enc();
}
inline const std::string& SetupRequestMessage::_internal_enc() const {
  return enc_.GetNoArena();
}
inline void SetupRequestMessage::_internal_set_enc(const std::string& value) {
  
  enc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetupRequestMessage::set_enc(std::string&& value) {
  
  enc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SetupRequestMessage.enc)
}
inline void SetupRequestMessage::set_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SetupRequestMessage.enc)
}
inline void SetupRequestMessage::set_enc(const void* value, size_t size) {
  
  enc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SetupRequestMessage.enc)
}
inline std::string* SetupRequestMessage::_internal_mutable_enc() {
  
  return enc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetupRequestMessage::release_enc() {
  // @@protoc_insertion_point(field_release:HXT.SetupRequestMessage.enc)
  
  return enc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetupRequestMessage::set_allocated_enc(std::string* enc) {
  if (enc != nullptr) {
    
  } else {
    
  }
  enc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enc);
  // @@protoc_insertion_point(field_set_allocated:HXT.SetupRequestMessage.enc)
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bytes stag = 1;
inline void SearchRequestMessage::clear_stag() {
  stag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::stag() const {
  // @@protoc_insertion_point(field_get:HXT.SearchRequestMessage.stag)
  return _internal_stag();
}
inline void SearchRequestMessage::set_stag(const std::string& value) {
  _internal_set_stag(value);
  // @@protoc_insertion_point(field_set:HXT.SearchRequestMessage.stag)
}
inline std::string* SearchRequestMessage::mutable_stag() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchRequestMessage.stag)
  return _internal_mutable_stag();
}
inline const std::string& SearchRequestMessage::_internal_stag() const {
  return stag_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_stag(const std::string& value) {
  
  stag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_stag(std::string&& value) {
  
  stag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchRequestMessage.stag)
}
inline void SearchRequestMessage::set_stag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchRequestMessage.stag)
}
inline void SearchRequestMessage::set_stag(const void* value, size_t size) {
  
  stag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchRequestMessage.stag)
}
inline std::string* SearchRequestMessage::_internal_mutable_stag() {
  
  return stag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_stag() {
  // @@protoc_insertion_point(field_release:HXT.SearchRequestMessage.stag)
  
  return stag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_stag(std::string* stag) {
  if (stag != nullptr) {
    
  } else {
    
  }
  stag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stag);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchRequestMessage.stag)
}

// uint32 index = 2;
inline void SearchRequestMessage::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequestMessage::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequestMessage::index() const {
  // @@protoc_insertion_point(field_get:HXT.SearchRequestMessage.index)
  return _internal_index();
}
inline void SearchRequestMessage::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void SearchRequestMessage::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:HXT.SearchRequestMessage.index)
}

// bytes xtokenx = 3;
inline void SearchRequestMessage::clear_xtokenx() {
  xtokenx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::xtokenx() const {
  // @@protoc_insertion_point(field_get:HXT.SearchRequestMessage.xtokenx)
  return _internal_xtokenx();
}
inline void SearchRequestMessage::set_xtokenx(const std::string& value) {
  _internal_set_xtokenx(value);
  // @@protoc_insertion_point(field_set:HXT.SearchRequestMessage.xtokenx)
}
inline std::string* SearchRequestMessage::mutable_xtokenx() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchRequestMessage.xtokenx)
  return _internal_mutable_xtokenx();
}
inline const std::string& SearchRequestMessage::_internal_xtokenx() const {
  return xtokenx_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_xtokenx(const std::string& value) {
  
  xtokenx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_xtokenx(std::string&& value) {
  
  xtokenx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchRequestMessage.xtokenx)
}
inline void SearchRequestMessage::set_xtokenx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xtokenx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchRequestMessage.xtokenx)
}
inline void SearchRequestMessage::set_xtokenx(const void* value, size_t size) {
  
  xtokenx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchRequestMessage.xtokenx)
}
inline std::string* SearchRequestMessage::_internal_mutable_xtokenx() {
  
  return xtokenx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_xtokenx() {
  // @@protoc_insertion_point(field_release:HXT.SearchRequestMessage.xtokenx)
  
  return xtokenx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_xtokenx(std::string* xtokenx) {
  if (xtokenx != nullptr) {
    
  } else {
    
  }
  xtokenx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xtokenx);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchRequestMessage.xtokenx)
}

// bytes xtokeny = 4;
inline void SearchRequestMessage::clear_xtokeny() {
  xtokeny_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::xtokeny() const {
  // @@protoc_insertion_point(field_get:HXT.SearchRequestMessage.xtokeny)
  return _internal_xtokeny();
}
inline void SearchRequestMessage::set_xtokeny(const std::string& value) {
  _internal_set_xtokeny(value);
  // @@protoc_insertion_point(field_set:HXT.SearchRequestMessage.xtokeny)
}
inline std::string* SearchRequestMessage::mutable_xtokeny() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchRequestMessage.xtokeny)
  return _internal_mutable_xtokeny();
}
inline const std::string& SearchRequestMessage::_internal_xtokeny() const {
  return xtokeny_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_xtokeny(const std::string& value) {
  
  xtokeny_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_xtokeny(std::string&& value) {
  
  xtokeny_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchRequestMessage.xtokeny)
}
inline void SearchRequestMessage::set_xtokeny(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xtokeny_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchRequestMessage.xtokeny)
}
inline void SearchRequestMessage::set_xtokeny(const void* value, size_t size) {
  
  xtokeny_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchRequestMessage.xtokeny)
}
inline std::string* SearchRequestMessage::_internal_mutable_xtokeny() {
  
  return xtokeny_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_xtokeny() {
  // @@protoc_insertion_point(field_release:HXT.SearchRequestMessage.xtokeny)
  
  return xtokeny_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_xtokeny(std::string* xtokeny) {
  if (xtokeny != nullptr) {
    
  } else {
    
  }
  xtokeny_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xtokeny);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchRequestMessage.xtokeny)
}

// bytes d1 = 5;
inline void SearchRequestMessage::clear_d1() {
  d1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::d1() const {
  // @@protoc_insertion_point(field_get:HXT.SearchRequestMessage.d1)
  return _internal_d1();
}
inline void SearchRequestMessage::set_d1(const std::string& value) {
  _internal_set_d1(value);
  // @@protoc_insertion_point(field_set:HXT.SearchRequestMessage.d1)
}
inline std::string* SearchRequestMessage::mutable_d1() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchRequestMessage.d1)
  return _internal_mutable_d1();
}
inline const std::string& SearchRequestMessage::_internal_d1() const {
  return d1_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_d1(const std::string& value) {
  
  d1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_d1(std::string&& value) {
  
  d1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchRequestMessage.d1)
}
inline void SearchRequestMessage::set_d1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchRequestMessage.d1)
}
inline void SearchRequestMessage::set_d1(const void* value, size_t size) {
  
  d1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchRequestMessage.d1)
}
inline std::string* SearchRequestMessage::_internal_mutable_d1() {
  
  return d1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_d1() {
  // @@protoc_insertion_point(field_release:HXT.SearchRequestMessage.d1)
  
  return d1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_d1(std::string* d1) {
  if (d1 != nullptr) {
    
  } else {
    
  }
  d1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d1);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchRequestMessage.d1)
}

// bytes d2 = 6;
inline void SearchRequestMessage::clear_d2() {
  d2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::d2() const {
  // @@protoc_insertion_point(field_get:HXT.SearchRequestMessage.d2)
  return _internal_d2();
}
inline void SearchRequestMessage::set_d2(const std::string& value) {
  _internal_set_d2(value);
  // @@protoc_insertion_point(field_set:HXT.SearchRequestMessage.d2)
}
inline std::string* SearchRequestMessage::mutable_d2() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchRequestMessage.d2)
  return _internal_mutable_d2();
}
inline const std::string& SearchRequestMessage::_internal_d2() const {
  return d2_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_d2(const std::string& value) {
  
  d2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_d2(std::string&& value) {
  
  d2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchRequestMessage.d2)
}
inline void SearchRequestMessage::set_d2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchRequestMessage.d2)
}
inline void SearchRequestMessage::set_d2(const void* value, size_t size) {
  
  d2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchRequestMessage.d2)
}
inline std::string* SearchRequestMessage::_internal_mutable_d2() {
  
  return d2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_d2() {
  // @@protoc_insertion_point(field_release:HXT.SearchRequestMessage.d2)
  
  return d2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_d2(std::string* d2) {
  if (d2 != nullptr) {
    
  } else {
    
  }
  d2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d2);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchRequestMessage.d2)
}

// -------------------------------------------------------------------

// SearchReply

// uint32 index = 1;
inline void SearchReply::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchReply::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchReply::index() const {
  // @@protoc_insertion_point(field_get:HXT.SearchReply.index)
  return _internal_index();
}
inline void SearchReply::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void SearchReply::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:HXT.SearchReply.index)
}

// bytes h = 2;
inline void SearchReply::clear_h() {
  h_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchReply::h() const {
  // @@protoc_insertion_point(field_get:HXT.SearchReply.h)
  return _internal_h();
}
inline void SearchReply::set_h(const std::string& value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:HXT.SearchReply.h)
}
inline std::string* SearchReply::mutable_h() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchReply.h)
  return _internal_mutable_h();
}
inline const std::string& SearchReply::_internal_h() const {
  return h_.GetNoArena();
}
inline void SearchReply::_internal_set_h(const std::string& value) {
  
  h_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchReply::set_h(std::string&& value) {
  
  h_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchReply.h)
}
inline void SearchReply::set_h(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  h_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchReply.h)
}
inline void SearchReply::set_h(const void* value, size_t size) {
  
  h_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchReply.h)
}
inline std::string* SearchReply::_internal_mutable_h() {
  
  return h_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchReply::release_h() {
  // @@protoc_insertion_point(field_release:HXT.SearchReply.h)
  
  return h_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply::set_allocated_h(std::string* h) {
  if (h != nullptr) {
    
  } else {
    
  }
  h_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), h);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchReply.h)
}

// bytes eid = 3;
inline void SearchReply::clear_eid() {
  eid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchReply::eid() const {
  // @@protoc_insertion_point(field_get:HXT.SearchReply.eid)
  return _internal_eid();
}
inline void SearchReply::set_eid(const std::string& value) {
  _internal_set_eid(value);
  // @@protoc_insertion_point(field_set:HXT.SearchReply.eid)
}
inline std::string* SearchReply::mutable_eid() {
  // @@protoc_insertion_point(field_mutable:HXT.SearchReply.eid)
  return _internal_mutable_eid();
}
inline const std::string& SearchReply::_internal_eid() const {
  return eid_.GetNoArena();
}
inline void SearchReply::_internal_set_eid(const std::string& value) {
  
  eid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchReply::set_eid(std::string&& value) {
  
  eid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HXT.SearchReply.eid)
}
inline void SearchReply::set_eid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HXT.SearchReply.eid)
}
inline void SearchReply::set_eid(const void* value, size_t size) {
  
  eid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HXT.SearchReply.eid)
}
inline std::string* SearchReply::_internal_mutable_eid() {
  
  return eid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchReply::release_eid() {
  // @@protoc_insertion_point(field_release:HXT.SearchReply.eid)
  
  return eid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply::set_allocated_eid(std::string* eid) {
  if (eid != nullptr) {
    
  } else {
    
  }
  eid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eid);
  // @@protoc_insertion_point(field_set_allocated:HXT.SearchReply.eid)
}

// -------------------------------------------------------------------

// ExecuteStatus

// bool status = 1;
inline void ExecuteStatus::clear_status() {
  status_ = false;
}
inline bool ExecuteStatus::_internal_status() const {
  return status_;
}
inline bool ExecuteStatus::status() const {
  // @@protoc_insertion_point(field_get:HXT.ExecuteStatus.status)
  return _internal_status();
}
inline void ExecuteStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ExecuteStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:HXT.ExecuteStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HXT

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HXT_2eproto
